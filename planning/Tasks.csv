TaskID,WBSID,WBS_Name,Task_Group_Name,Name,Status,Priority,Description,Check GPT
T-000001,W-000001,개발환경설정,개발환경설정,Readme.md 파일생성,완료,Medium,Project 목적과 Stack 추가,
T-000002,W-000001,개발환경설정,개발환경설정,"WBS.csv, Tasks.csv 생성",완료,Medium," ● 일정 관리 
 ● GPT와 일정공유
 ● WBS는 대 일정에 대한 것이고 Tasks는 WBS의 하위 업문이다.",
T-000003,W-000002,Git 규범/가드,파일 가드,.gitattributes 생성,확인필요,High,".gitattributes
 ● 목적: Git이 “저장소 안”에서 줄바꿈·바이너리 처리 등을 표준화.
 ● 효과
         - 윈도우에서 작성해도 리포에선 LF로 고정(CRLF 혼선, 불필요한 diff 방지).
         - 바이너리(아이콘, 폰트)도 오탐지 없이 취급.
 ● 흐름: 체크아웃/커밋 시 Git이 자동 변환·정규화 → 팀 전체 diff/merge가 일관.",
T-000004,W-000002,Git 규범/가드,파일 가드,.gitignore 생성,시작전,High,".gitignore
 ● 목적: 빌드 산출물, 캐시, OS 파일 등을 커밋에서 제외.
 ● 효과: 리포가 “소스만” 담음 → CI 속도↑, 충돌↓, 보안 리스크↓(토큰 파일 등).
 ● 흐름: git status에서 보이지 않음 → 실수로 커밋할 일이 사라짐.",
T-000005,W-000002,Git 규범/가드,파일 가드,.editorconfig 생성,시작전,High,".editorconfig
 ● 목적: 에디터(예: VS Code)가 탭/스페이스, 들여쓰기, 파일 끝 개행, 인코딩을 통일.
 ● 효과: 사람마다 에디터 설정 달라도 같은 포맷 유지 → lint 이전 단계에서 잡음 제거.
 ● 흐름: 파일 저장 시 에디터가 규칙 적용 → PR 전에 포맷이 이미 일정.",
T-000006,W-000002,Git 규범/가드,커밋/브랜치 규칙 묶음,COMMIT_TEMPLATE 설정,시작전,High,"COMMIT_TEMPLATE
 ● 목적: git commit 창을 열면 초안 폼이 자동으로 채워지는 템플릿(제목/본문/Breaking/Refs 자리).
 ● 효과: 초보라도 일관된 메시지 작성. Conventional Commits 형식 유도.
 ● 흐름: git config commit.template 설정 → 커밋마다 같은 골격으로 작성.",
T-000007,W-000002,Git 규범/가드,커밋/브랜치 규칙 묶음,"Conventional Commits 
   + commit-msg(amend) 훅",시작전,High,"Conventional Commits + commit-msg(amend) 훅
 ● 목적
        - feat: …, fix: … 같은 타입+제목 규칙. 
        - 메시지 검증/자동 보정(예: 스코프/티켓ID 추가)과 사소한 수정은 --amend로 히스토리 청결 유지.
 ● 효과: 변경 의도 검색 용이, 자동 CHANGELOG 생성 기반, 리뷰 체계화.
 ● 흐름: 커밋 시 훅이 형식 검사 → 실패 시 차단, 성공 시 통과. 작은 수정은 git commit --amend --no-edit.",
T-000008,W-000002,Git 규범/가드,커밋/브랜치 규칙 묶음,"기본 브랜치 main 
   + 브랜치 네이밍",시작전,High,"기본 브랜치 main + 브랜치 네이밍
 ● 목적: 배포 기준선은 main. 작업은 feat/button, fix/tooltip-crash처럼 프리픽스/설명 규칙.
 ● 효과: 히스토리 읽기 쉬움, 자동 릴리스/CI 조건 설정이 간단.
 ● 흐름: 새 작업 → 토픽 브랜치 생성 → PR로 main에 머지.",
T-000009,W-000002,Git 규범/가드,커밋/브랜치 규칙 묶음,CODEOWNERS & PR 템플릿,시작전,High,"CODEOWNERS & PR 템플릿
 ● 목적: 경로별 소유자 지정, PR 폼(체크리스트/테스트 방법/스크린샷).
 ● 효과: 자동 리뷰어 요청, 리뷰 품질 균질화.
 ● 흐름: PR 열면 템플릿이 미리 채워짐 → CODEOWNERS에게 리뷰 요청 자동 발송.",
T-000010,W-000002,Git 규범/가드,커밋/브랜치 규칙 묶음,Changesets 초기화(버전/릴리스 흐름 고정),시작전,High,"Changesets 초기화(버전/릴리스 흐름 고정)
 ● 목적: 패키지별 변경을 텍스트 파일로 기록 → 릴리스 시 버전/CHANGELOG 자동 산출.
 ● 효과: 모노레포 다중 패키지 버전 충돌 제거, 의도된 SemVer 반영.
 ● 흐름: 기능 완료 시 changeset 추가 → main 머지 후 릴리스 액션이 버전/배포 생성.",
T-000011,W-000002,Git 규범/가드,CI 최소골격 & 브랜치 보호,.github/workflows/ci.yml (Node 22 + Corepack + pnpm install),시작전,High,".github/workflows/ci.yml (Node 22 + Corepack + pnpm install)
 ● 목적
         - PR/main 푸시에 자동 실행. 
         -Node 22 설치 → Corepack 활성화 → pnpm 준비 → pnpm -w install로 워크스페이스 종속성 검증(추후 test/build 추가).
 ● 효과: “내 PC에선 돼요” 방지, 잠재적 의존성 문제를 PR 단계에서 차단.
 ● 흐름: PR 생성/업데이트 → CI가 설치/검증 → 실패 시 머지 불가.",
T-000012,W-000002,Git 규범/가드,CI 최소골격 & 브랜치 보호,브랜치 보호 규칙,시작전,High,"브랜치 보호 규칙
 ● 목적: main에 필수 CI 통과 + 최소 1명 리뷰 요구. (옵션: Linear/Issue 링크, Conversations resolved 등)
 ● 효과: 실수 머지 방지, 품질 게이트 고정.
 ● 흐름: PR 생성 → CI 통과 + 리뷰 승인 없으면 Merge 버튼 비활성.",
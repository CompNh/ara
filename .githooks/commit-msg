#!/usr/bin/env bash
set -euo pipefail

commit_msg_file="$1"

fail() {
  echo "[commit-msg] $1" >&2
  echo "[commit-msg] 수정 후에는 \`git commit --amend --no-edit\` 등으로 메시지를 고치세요." >&2
  exit 1
}

trim() {
  # shellcheck disable=SC2001
  sed -E 's/^[[:space:]]+//; s/[[:space:]]+$//' <<<"$1"
}

first_line_raw="$(sed -n '1p' "$commit_msg_file" | tr -d '\r')"
subject="$(trim "$first_line_raw")"

if [[ -z "$subject" ]]; then
  fail "커밋 메시지의 첫 줄이 비어 있습니다. Conventional Commits 형식으로 작성해 주세요."
fi

allowed_types="build|chore|ci|docs|feat|fix|perf|refactor|revert|style|test|release"
if ! grep -Eq "^($allowed_types)(\([a-z0-9._-]+\))?(!)?: [^ ].+" <<<"$subject"; then
  fail "첫 줄이 Conventional Commits(type) 형식과 일치하지 않습니다: '<type>([scope])?: <subject>'" \
       "type : build|chore|ci|docs|feat|fix|perf|refactor|revert|style|test|release"
fi

subject_length=$(printf "%s" "$subject" | wc -m)
max_length=72
if (( subject_length > max_length )); then
  fail "커밋 제목이 ${max_length}자를 초과했습니다(현재 ${subject_length}자). 더 간결하게 작성해 주세요."
fi

subject_body="${subject#*: }"
if [[ -z "$subject_body" ]]; then
  fail "커밋 제목의 본문이 비어 있습니다."
fi

require_line() {
  local label="$1"
  local pattern="^${label}[[:space:]]*:"
  local line
  line=$(grep -E -m1 "$pattern" "$commit_msg_file" || true)
  if [[ -z "$line" ]]; then
    fail "'${label}:' 행을 찾을 수 없습니다. 커밋 템플릿을 채워 주세요."
  fi
  # shellcheck disable=SC2001
  local value
  value=$(sed -E "s/^${label}[[:space:]]*:[[:space:]]*//" <<<"$line")
  value="$(trim "$value")"
  if [[ -z "$value" ]]; then
    fail "'${label}:' 행이 비어 있습니다."
  fi
  if grep -Eq '[<>]' <<<"$value"; then
    fail "'${label}:' 행에 플레이스홀더(<...>)가 남아 있습니다. 실제 값을 채워 주세요."
  fi
  printf '%s' "$value"
}

wbs_value=$(require_line "WBS")
if ! grep -Eq '^W-[0-9]{6}$' <<<"$wbs_value"; then
  fail "WBS 값은 'W-000123' 형식이어야 합니다."
fi

task_value=$(require_line "Task")
if ! grep -Eq '^T-[0-9]{6}$' <<<"$task_value"; then
  fail "Task 값은 'T-000123' 형식이어야 합니다."
fi

task_name_value=$(require_line "Task Name")

exit 0
